sizeCm<-rnorm(n=100,mean=175,sd=15)
massKg<-sizeCm*0.5
age<-rnorm(n=100,mean=50,sd=10)
massKgNoisy<-jitter(massKg,factor=1000)
table<-data.frame(sizeCm,massKg,age)
write.table(table,"charPersonRandomData.txt",sep=",")
#if mass was correlated to size for people around 50 yo
sizeCm<-rnorm(n=100,mean=175,sd=15)
massKg<-sizeCm*0.5
age<-rnorm(n=100,mean=50,sd=10)
massKgNoisy<-jitter(massKg,factor=1000)
cleanData<-data.frame(sizeCm,massKg,age)
noisyData<-data.frame(sizeCm,massKgNoisy,age)
write.table(table,"charPersonRandomData.txt",sep=",")
write.table(table,"charPersonRandomNoisyData.txt",sep=",")
#if mass was correlated to size for people around 50 yo
sizeCm<-rnorm(n=100,mean=175,sd=15)
massKg<-sizeCm*0.5
age<-rnorm(n=100,mean=50,sd=10)
massKgNoisy<-jitter(massKg,factor=1000)
cleanData<-data.frame(sizeCm,massKg,age)
noisyData<-data.frame(sizeCm,massKgNoisy,age)
write.table(cleanData,"charPersonRandomData.txt",sep=",")
write.table(noisyData,"charPersonRandomNoisyData.txt",sep=",")
#if mass was correlated to size for people around 50 yo
sizeCm<-rnorm(n=100,mean=175,sd=15)
massKg<-sizeCm*0.5
age<-rnorm(n=100,mean=50,sd=10)
massKgNoisy<-jitter(massKg,factor=1000)
cleanData<-data.frame(sizeCm,massKg,age)
noisyData<-data.frame(sizeCm,massKgNoisy,age)
write.table(cleanData,"charPersonRandomData.txt",sep=",")
write.table(noisyData,"charPersonRandomNoisyData.txt",sep=",")
write.table(noisyData, "testCSV.csv",sep=",")
library(readr)
testCSV <- read_csv("testCSV.csv")
View(testCSV)
library(readr)
testCSV <- read_csv("testCSV.csv")
mean(testCSV)
sd(testCSV)
library(readr)
testCSV <- read_csv("testCSV.csv")
mean(testCSV)
sd(testCSV)
library(readr)
testCSV <- read_csv("testCSV.csv")
mean(testCSV[0])
library(readr)
testCSV <- read_csv("testCSV.csv")
mean(testCSV[1])
library(readr)
testCSV <- read_csv("testCSV.csv")
mean(testCSV.sizeCm)
library(readr)
testCSV <- read_csv("testCSV.csv")
testCSV
table <- read(charPersonRandomData.txt)
table <- read.table("charPersonRandomData.txt",header=TRUE,sep=",")
table <- read.table("charPersonRandomData.txt",header=TRUE,sep=",")
mean(sizeCm)
table <- read.table("charPersonRandomData.txt",header=TRUE,sep=",")
mean(sizeCm)
table <- read.table("charPersonRandomData.txt",header=TRUE,sep=",")
mean(table.sizeCm)
table <- read.table("charPersonRandomData.txt",header=TRUE,sep=",")
mean(table[0])
table <- read.table("charPersonRandomData.txt",header=TRUE,sep=",")
table
table <- read.table("charPersonRandomData.txt",header=TRUE,sep=",")
summary(table)
table <- read.table("charPersonRandomData.txt",header=TRUE,sep=",")
summary(table$sizeCm)
summary(table$massKg)
summary(table$age)
table <- read.table("charPersonRandomData.txt",header=TRUE,sep=",")
mean(table$sizeCm)
mean(table$massKg)
mean(table$age)
sd(table$sizeCm)
sd(table$massKg)
sd(table$age)
table <- read.table("charPersonRandomNoisyData.txt",header=TRUE,sep=",")
mean(table$sizeCm)
mean(table$massKg)
mean(table$age)
sd(table$sizeCm)
sd(table$massKg)
sd(table$age)
table <- read.table("charPersonRandomNoisyData.txt",header=TRUE,sep=",")
mean(table$sizeCm)
sd(table$sizeCm)
mean(table$massKg)
sd(table$massKg)
mean(table$age)
sd(table$age)
table <- read.table("charPersonRandomNoisyData.txt",header=TRUE,sep=",")
mean(table$sizeCm)
sd(table$sizeCm)
mean(table$massKg)
sd(table$massKg)
mean(table$age)
sd(table$age)
table <- read.table("charPersonRandomNoisyData.txt",header=TRUE,sep=",")
mean(table$sizeCm)
sd(table$sizeCm)
mean(table$massKg)
sd(table$massKg)
mean(table$age)
sd(table$age)
#if mass was correlated to size for people around 50 yo
sizeM<-rnorm(n=1000,mean=1.75,sd=1.5)
massKg<-sizeCm*50
averageKcalEaten<-(massKg*20 + sizeM*500)
massKgNoisy<-jitter(massKg,factor=100)
cleanData<-data.frame(sizeM,massKg,age)
noisyData<-data.frame(sizeM,massKgNoisy,age)
write.csv(noisyData,"1000pointscharPersonNoisy.csv")
twoData<-data.frame(sizeM,massKg)
write.csv(twodata,"2DcharPersonRandomNoisyData.csv")
#if mass was correlated to size for people around 50 yo
sizeM<-rnorm(n=1000,mean=1.75,sd=1.5)
massKg<-sizeCm*50
averageKcalEaten<-(massKg*20 + sizeM*500)
massKgNoisy<-jitter(massKg,factor=100)
cleanData<-data.frame(sizeM,massKg,age)
noisyData<-data.frame(sizeM,massKgNoisy,age)
write.csv(noisyData,"1000pointscharPersonNoisy.csv")
twoData<-data.frame(sizeM,massKg)
write.csv(twoData,"2DcharPersonRandomNoisyData.csv")
#if mass was correlated to size for people around 50 yo
sizeM<-rnorm(n=1000,mean=1.75,sd=1.5)
massKg<-sizeM*50
averageKcalEaten<-(massKg*20 + sizeM*500)
massKgNoisy<-jitter(massKg,factor=100)
cleanData<-data.frame(sizeM,massKg,age)
noisyData<-data.frame(sizeM,massKgNoisy,age)
write.csv(noisyData,"1000pointscharPersonNoisy.csv")
twoData<-data.frame(sizeM,massKg)
write.csv(twoData,"2DcharPersonRandomNoisyData.csv")
#if mass was correlated to size for people around 50 yo
sizeM<-rnorm(n=1000,mean=1.75,sd=1.5)
massKg<-sizeM*50
massKgNoisy<-jitter(massKg,factor=100)
averageKcalEaten<-(massKg*20 + sizeM*500)
noisyData<-data.frame(sizeM,massKgNoisy,averageKcalEaten)
write.csv(noisyData,"1000pointscharPersonNoisy.csv")
twoData<-data.frame(sizeM,massKg)
write.csv(twoData,"2DcharPersonRandomNoisyData.csv")
#if mass was correlated to size for people around 50 yo
sizeM<-rnorm(n=1000,mean=1.75,sd=0.15)
massKg<-sizeM*50
massKgNoisy<-jitter(massKg,factor=100)
averageKcalEaten<-(massKg*20 + sizeM*500)
noisyData<-data.frame(sizeM,massKgNoisy,averageKcalEaten)
write.csv(noisyData,"1000pointscharPersonNoisy.csv")
twoData<-data.frame(sizeM,massKg)
write.csv(twoData,"2DcharPersonRandomNoisyData.csv")
#if mass was correlated to size for people around 50 yo
sizeM<-rnorm(n=1000,mean=1.75,sd=0.15)
massKg<-sizeM*50
massKgNoisy<-jitter(massKg,factor=100)
averageKcalEaten<-rnorm(n=1000,mean=2000,sd=50) + massKgNoisy*5
noisyData<-data.frame(sizeM,massKgNoisy,averageKcalEaten)
write.csv(noisyData,"1000pointscharPersonNoisy.csv")
twoData<-data.frame(sizeM,massKgNoisy)
write.csv(twoData,"2DcharPersonRandomNoisyData.csv")
#if mass was correlated to size for people around 50 yo
sizeM<-rnorm(n=1000,mean=1.75,sd=0.15)
massKg<-sizeM*50
massKgNoisy<-jitter(massKg,factor=100)
averageKcalEaten<-rnorm(n=1000,mean=2000,sd=50) + massKgNoisy*5
noisyData<-data.frame(sizeM,massKgNoisy,averageKcalEaten)
write.csv(noisyData,"1000pointscharPersonNoisy.csv")
twoData<-data.frame(sizeM,massKgNoisy)
write.csv(twoData,"2DcharPersonRandomNoisyData.csv")
#if mass was correlated to size for people around 50 yo
sizeM<-rnorm(n=1000,mean=1.75,sd=0.15)
massKg<-sizeM*50
massKgNoisy<-jitter(massKg,factor=100)
averageKcalEaten<-rnorm(n=1000,mean=2000,sd=50) + massKgNoisy*5
noisyData<-data.frame(sizeM,massKgNoisy,averageKcalEaten)
write.csv(noisyData,"1000pointscharPersonNoisy.csv")
twoData<-data.frame(sizeM,averageKcalEaten)
write.csv(twoData,"2DcharPersonRandomNoisyData.csv")
library(readr)
X1000pointscharPersonNoisy <- read_csv("1000pointscharPersonNoisy.csv")
View(X1000pointscharPersonNoisy)
summary(x1000pointscharPersonNoisy)
summary(X1000pointscharPersonNoisy)
sd(X1000pointscharPersonNoisy$sizeM)
#if mass was correlated to size for people around 50 yo
sizeM<-rnorm(n=10000,mean=1.75,sd=0.15)
massKg<-sizeM*50
massKgNoisy<-jitter(massKg,factor=100)
averageKcalEaten<-rnorm(n=10000,mean=2000,sd=50) + massKgNoisy*5
noisyData<-data.frame(sizeM,massKgNoisy,averageKcalEaten)
write.csv(noisyData,"10kpointscharPersonNoisy.csv")
library(dplyr)
data.frame(
var1 = c(2, 3, 4, 5),
var2 = c(20, 30, 40, 50),
var3 = c(200, 300, 400, 500),
var4 = c('var1', 'var2', 'var3', 'var1')) %>%
mutate(var5 = case_when(var4 == "var1" ~ var1,
var4 == "var2" ~ var2,
var4 == "var3" ~ var3))
library(dplyr)
#if mass was correlated to size for people around 50 yo
timeSpentTryingMins<-rnorm(n=745,mean=15,sd=0.5)
qualityOfThePresentations<-rnorm(n=745,mean=20,sd=0.8)
qualityOfThePresentations<-jitter(qualityOfThePresentations,factor=10)
understandingOfTheProject<- timeSpentTryingMins*0,1 + qualityOfThePresentations*0,15
understandingOfTheProject<-jitter(massKg,factor=100)
#if mass was correlated to size for people around 50 yo
timeSpentTryingMins<-rnorm(n=745,mean=15,sd=0.5)
qualityOfThePresentations<-rnorm(n=745,mean=20,sd=0.8)
qualityOfThePresentations<-jitter(qualityOfThePresentations,factor=10)
understandingOfTheProject<- timeSpentTryingMins*0,1 + qualityOfThePresentations*0,15
understandingOfTheProject<-jitter(understandingOfTheProject,factor=100)
#if mass was correlated to size for people around 50 yo
timeSpentTryingMins<-rnorm(n=745,mean=15,sd=0.5)
qualityOfThePresentations<-rnorm(n=745,mean=20,sd=0.8)
qualityOfThePresentations<-jitter(qualityOfThePresentations,factor=10)
understandingOfTheProject<- timeSpentTryingMins*0,1 + qualityOfThePresentations*0,15
understandingOfTheProject<-jitter(understandingOfTheProject,factor=100)
#if mass was correlated to size for people around 50 yo
timeSpentTryingMins<-rnorm(n=745,mean=15,sd=0.5)
qualityOfThePresentations<-rnorm(n=745,mean=20,sd=0.8)
qualityOfThePresentations<-jitter(qualityOfThePresentations,factor=10)
understandingOfTheProject<- timeSpentTryingMins*0.1 + qualityOfThePresentations*0.15
understandingOfTheProject<-jitter(understandingOfTheProject,factor=100)
#if mass was correlated to size for people around 50 yo
timeSpentTryingMins<-rnorm(n=745,mean=15,sd=0.5)
qualityOfThePresentations<-rnorm(n=745,mean=20,sd=0.8)
qualityOfThePresentations<-jitter(qualityOfThePresentations,factor=10)
understandingOfTheProject<- timeSpentTryingMins*0.2 + qualityOfThePresentations*0.3
understandingOfTheProject<-jitter(understandingOfTheProject,factor=100)
test<-data.frame(understandingOfTheProject,timeSpentTryingMins,qualityOfThePresentations)
View(test)
timeSpentTryingMins<-rnorm(n=745,mean=15,sd=5)
qualityOfThePresentations<-rnorm(n=745,mean=20,sd=15)
qualityOfThePresentations<-jitter(qualityOfThePresentations,factor=10)
understandingOfTheProject<- timeSpentTryingMins*0.2 + qualityOfThePresentations*0.3
understandingOfTheProject<-jitter(understandingOfTheProject,factor=100)
test<-data.frame(understandingOfTheProject,timeSpentTryingMins,qualityOfThePresentations)
View(test)
availableCognitiveCapacity<-c(745)
availableCognitiveCapacity
summary(understandingOfTheProject)
summary(timeSpentTryingMins)
availableCognitiveCapacityPossibilities<-factor(c("Low","Medium","High","Surhuman"))
availableCognitiveCapacityPos
availableCognitiveCapacityPossibilities[1]
availableCognitiveCapacityPossibilities
availableCognitiveCapacityPossibilities[2]
availableCognitiveCapacity<-c()
for (val in timeSpentTryingMins)
{
if (val < 11) {
availableCognitiveCapacity=availableCognitiveCapacityPossibilities[1]
} else if (val<15) { availableCognitiveCapacity=availableCognitiveCapacityPossibilities[2]
} else if (val<18) { availableCognitiveCapacity=availableCognitiveCapacityPossibilities[3]
}else { availableCognitiveCapacity=availableCognitiveCapacityPossibilities[4]
}
}
x <- gl(2, 4, 8)
levels(x)[1] <- "low"
levels(x)[2] <- "high"
x
summary(x)
mean(x)
availableCognitiveCapacityPossibilities<-factor(c("Low","Medium","High","Surhuman"))
availableCognitiveCapacity<-c()
for (val in timeSpentTryingMins)
{
if (val < 11) {
availableCognitiveCapacity<-availableCognitiveCapacityPossibilities[1]
} else if (val<15) { availableCognitiveCapacity<-availableCognitiveCapacityPossibilities[2]
} else if (val<18) { availableCognitiveCapacity<-availableCognitiveCapacityPossibilities[3]
}else { availableCognitiveCapacity<-availableCognitiveCapacityPossibilities[4]
}
}
availableCognitiveCapacityPossibilities<-factor(c("Low","Medium","High","Surhuman"))
availableCognitiveCapacity<-c()
k<-0
for (val in timeSpentTryingMins)
{
if (val < 11) {
availableCognitiveCapacity[k]<-availableCognitiveCapacityPossibilities[1]
} else if (val<15) { availableCognitiveCapacity[k]<-availableCognitiveCapacityPossibilities[2]
} else if (val<18) { availableCognitiveCapacity[k]<-availableCognitiveCapacityPossibilities[3]
}else { availableCognitiveCapacity[k]<-availableCognitiveCapacityPossibilities[4]
}
k=k+1
}
availableCognitiveCapacity
timeSpentTryingMins
availableCognitiveCapacity<-c()
availableCognitiveCapacityPossibilities<-factor(c("Low","Medium","High","Surhuman"))
availableCognitiveCapacity<-c()
k<-0
for (val in timeSpentTryingMins)
{
if (val < 11) {
(availableCognitiveCapacity)[k]<-availableCognitiveCapacityPossibilities[1]
} else if (val<15) { levels(availableCognitiveCapacity)[k]<-availableCognitiveCapacityPossibilities[2]
} else if (val<18) { levels(availableCognitiveCapacity)[k]<-availableCognitiveCapacityPossibilities[3]
}else { levels(availableCognitiveCapacity)[k]<-availableCognitiveCapacityPossibilities[4]
}
k=k+1
}
k<-0
for (val in timeSpentTryingMins)
{
if (val < 11) {
(availableCognitiveCapacity)[k]<-availableCognitiveCapacityPossibilities[1]
} else if (val<15) { levels(availableCognitiveCapacity)[k]<-availableCognitiveCapacityPossibilities[2]
} else if (val<18) { levels(availableCognitiveCapacity)[k]<-availableCognitiveCapacityPossibilities[3]
}else { levels(availableCognitiveCapacity)[k]<-availableCognitiveCapacityPossibilities[4]
}
k=k+1
}
availableCognitiveCapacityPossibilities[1]
availableCognitiveCapacityPossibilities$1
availableCognitiveCapacityPossibilities
availableCognitiveCapacityPossibilities$levels
availableCognitiveCapacityPossibilities$Levels
availableCognitiveCapacityPossibilities
availableCognitiveCapacityPossibilities[4]
availableCognitiveCapacityPossibilities<-factor(c("Low","Medium","High","Surhuman"))
availableCognitiveCapacity<-c()
k<-1
for (val in timeSpentTryingMins)
{
if (val < 11) {
(availableCognitiveCapacity)[k]<-availableCognitiveCapacityPossibilities[1]
} else if (val<15) { levels(availableCognitiveCapacity)[k]<-availableCognitiveCapacityPossibilities[2]
} else if (val<18) { levels(availableCognitiveCapacity)[k]<-availableCognitiveCapacityPossibilities[3]
}else { levels(availableCognitiveCapacity)[k]<-availableCognitiveCapacityPossibilities[4]
}
k=k+1
}
availableCognitiveCapacityPossibilities<-factor(c("Low","Medium","High","Surhuman"))
availableCognitiveCapacity<-c()
k<-1
for (val in timeSpentTryingMins)
{
if (val < 11) {
levels(availableCognitiveCapacity)[k]<-availableCognitiveCapacityPossibilities[1]
} else if (val<15) { levels(availableCognitiveCapacity)[k]<-availableCognitiveCapacityPossibilities[2]
} else if (val<18) { levels(availableCognitiveCapacity)[k]<-availableCognitiveCapacityPossibilities[3]
}else { levels(availableCognitiveCapacity)[k]<-availableCognitiveCapacityPossibilities[4]
}
k=k+1
}
availableCognitiveCapacity<-c()
k<-1
for (val in timeSpentTryingMins)
{
if (val < 11) { levels(availableCognitiveCapacity)[k]<-availableCognitiveCapacityPossibilities[1]
} else if (val<15) { levels(availableCognitiveCapacity)[k]<-availableCognitiveCapacityPossibilities[2]
} else if (val<18) { levels(availableCognitiveCapacity)[k]<-availableCognitiveCapacityPossibilities[3]
}else { levels(availableCognitiveCapacity)[k]<-availableCognitiveCapacityPossibilities[4]
}
k=k+1
}
availableCognitiveCapacity<-c()
k<-1
for (val in timeSpentTryingMins)
{
if (val < 11) { levels(availableCognitiveCapacity)[k]<-"Low"
} else if (val<15) { levels(availableCognitiveCapacity)[k]<-availableCognitiveCapacityPossibilities[2]
} else if (val<18) { levels(availableCognitiveCapacity)[k]<-availableCognitiveCapacityPossibilities[3]
}else { levels(availableCognitiveCapacity)[k]<-availableCognitiveCapacityPossibilities[4]
}
k=k+1
}
k<-1
for (val in timeSpentTryingMins) {
if (val < 11) { levels(availableCognitiveCapacity)[k]<-"Low"
} else if (val<15) { levels(availableCognitiveCapacity)[k]<-availableCognitiveCapacityPossibilities[2]
} else if (val<18) { levels(availableCognitiveCapacity)[k]<-availableCognitiveCapacityPossibilities[3]
}else { levels(availableCognitiveCapacity)[k]<-availableCognitiveCapacityPossibilities[4]
}
k=k+1
}
availableCognitiveCapacity<-c()
k<-1
for (val in timeSpentTryingMins) {
if (val < 11) { levels(availableCognitiveCapacity)[k]<-"Low"
} else if (val<15) { levels(availableCognitiveCapacity)[k]<-availableCognitiveCapacityPossibilities[2]
} else if (val<18) { levels(availableCognitiveCapacity)[k]<-availableCognitiveCapacityPossibilities[3]
} else { levels(availableCognitiveCapacity)[k]<-availableCognitiveCapacityPossibilities[4]
}
k=k+1
}
availableCognitiveCapacity<-c()
k<-1
for (val in timeSpentTryingMins) {
if (val < 11) { levels(availableCognitiveCapacity)[k]<-"Low"
} else if (val<15) { levels(availableCognitiveCapacity)[k]<-"availableCognitiveCapacityPossibilities[2]"
} else if (val<18) { levels(availableCognitiveCapacity)[k]<-"availableCognitiveCapacityPossibilities[3]"
} else { levels(availableCognitiveCapacity)[k]<-"availableCognitiveCapacityPossibilities[4]"
}
k=k+1
}
availableCognitiveCapacity[1]
help c
c()
help(c)
availableCognitiveCapacityPossibilities<-factor(c("Low","Medium","High","Surhuman"))
availableCognitiveCapacity<-c(1:745)
k<-1
for (val in timeSpentTryingMins) {
if (val < 11) { levels(availableCognitiveCapacity)[k]<-"Low"
} else if (val<15) { levels(availableCognitiveCapacity)[k]<-"availableCognitiveCapacityPossibilities[2]"
} else if (val<18) { levels(availableCognitiveCapacity)[k]<-"availableCognitiveCapacityPossibilities[3]"
} else { levels(availableCognitiveCapacity)[k]<-"availableCognitiveCapacityPossibilities[4]"
}
k=k+1
}
availableCognitiveCapacityPossibilities<-factor(c("Low","Medium","High","Surhuman"))
availableCognitiveCapacity<-c(1:745)
k<-1
for (val in timeSpentTryingMins) {
if (val < 11) { levels(availableCognitiveCapacity)[k]<-"Low"
} else if (val<15) { levels(availableCognitiveCapacity)[k]<-"Medium"
} else if (val<18) { levels(availableCognitiveCapacity)[k]<-"High"
} else { levels(availableCognitiveCapacity)[k]<-"Surhuman"
}
k=k+1
}
availableCognitiveCapacityPossibilities<-factor(c("Low","Medium","High","Surhuman"))
availableCognitiveCapacity<-c(1:745)
k<-1
for (val in timeSpentTryingMins) {
if (val < 11) { levels(availableCognitiveCapacity)[k]<-"Low"
} else if (val<15) { levels(availableCognitiveCapacity)[k]<-"Medium"
} else if (val<18) { levels(availableCognitiveCapacity)[k]<-"High"
} else { levels(availableCognitiveCapacity)[k]<-"Surhuman"
}
k=k+1
}
availableCognitiveCapacityPossibilities<-factor(c("Low","Medium","High","Surhuman"))
availableCognitiveCapacity<-c(1:745)
k<-1
for (val in timeSpentTryingMins) {
if (val < 11) { availableCognitiveCapacity<-"Low"
} else if (val<15) { availableCognitiveCapacity<-"Medium"
} else if (val<18) { availableCognitiveCapacity<-"High"
} else { availableCognitiveCapacity<-"Surhuman"
}
k=k+1
}
test<-data.frame(understandingOfTheProject,timeSpentTryingMins,qualityOfThePresentations,availableCognitiveCapacityPossibilities)
k<-1
for (val in timeSpentTryingMins) {
k=k+1
}
k<-1
for (val in timeSpentTryingMins) {
if (val < 11) { levels(availableCognitiveCapacity)[k]<-"Low"
} else if (val<15) { availableCognitiveCapacity<-"Medium"
} else if (val<18) { availableCognitiveCapacity<-"High"
} else { availableCognitiveCapacity<-"Surhuman"
}
k=k+1
}
availableCognitiveCapacity<-c(1:745)
k<-1
for (val in timeSpentTryingMins) {
if (val < 11) { availableCognitiveCapacity[k]<-"Low"
} else if (val<15) { availableCognitiveCapacity[k]<-"Medium"
} else if (val<18) { availableCognitiveCapacity[k]<-"High"
} else { availableCognitiveCapacity[k]<-"Surhuman"
}
k=k+1
}
test<-data.frame(understandingOfTheProject,timeSpentTryingMins,qualityOfThePresentations,availableCognitiveCapacity)
View(test)
View(test)
df<-data.frame(understandingOfTheProject,timeSpentTryingMins,qualityOfThePresentations,availableCognitiveCapacity)
availableCognitiveCapacity<-c(1:745)
k<-1
for (val in timeSpentTryingMins) {
if (val < 11) { availableCognitiveCapacity[k]<-availableCognitiveCapacityPossibilities[1]
} else if (val<15) { availableCognitiveCapacity[k]<-"Medium"
} else if (val<18) { availableCognitiveCapacity[k]<-"High"
} else { availableCognitiveCapacity[k]<-"Surhuman"
}
k=k+1
}
#if mass was correlated to size for people around 50 yo
timeSpentTryingMins<-rnorm(n=745,mean=15,sd=5)
qualityOfThePresentations<-rnorm(n=745,mean=20,sd=15)
qualityOfThePresentations<-jitter(qualityOfThePresentations,factor=10)
understandingOfTheProject<- timeSpentTryingMins*0.2 + qualityOfThePresentations*0.3
understandingOfTheProject<-jitter(understandingOfTheProject,factor=100)
availableCognitiveCapacityPossibilities<-factor(c("Low","Medium","High","Surhuman"))
availableCognitiveCapacity<-c(1:745)
k<-1
for (val in timeSpentTryingMins) {
if (val < 11) { availableCognitiveCapacity[k]<-"Low"
} else if (val<15) { availableCognitiveCapacity[k]<-"Medium"
} else if (val<18) { availableCognitiveCapacity[k]<-"High"
} else { availableCognitiveCapacity[k]<-"Surhuman"
}
k=k+1
}
df<-data.frame(understandingOfTheProject,timeSpentTryingMins,qualityOfThePresentations,availableCognitiveCapacity)
write.csv(df,"UnderstandingTimeQuality.csv")
